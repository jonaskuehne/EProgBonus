NETHZ: jkuehne

Total points (max. 5): 5

compile errors: NO
timeout: NO

test01ArgumentArrayNotModifed: PASS
test02NeighborExamples: PASS
test03LongerInputSimple: PASS
test04LongerInputContainedUp1: PASS
test05LongerInputContainedDown2: PASS
test06NegativeLongerInputContainedDown1: PASS
test07NegativeLongerInputContainedDown2: PASS
test08SmallestInputContainedUp1: PASS
test09SmallestInputContainedDown2: PASS
test10SmallestInputContainedMixed3: PASS
test11NegativeSmallestInputContainedDown1: PASS
test12NegativeSmallestInputContainedDown2: PASS
test13LongerInputNotContainedUp4: PASS
test14LongerInputNotContainedDown5: PASS
test15LongerInputNotContained8: PASS
test16LongerInputNotContained10: PASS
test17NegativeSmallestInputNotContained3: PASS
test18SmallestInputNotContainedUp4: PASS
test19SmallestInputNotContainedDown5: PASS
test20SmallestInputNotContained6: PASS
test21SmallestInputNotContainedMixed7: PASS
test22SmallestInputNotContainedMixed9: PASS
test23SmallestInputNotContained10: PASS
test24NegativeLongerInputNotContained3: PASS


Folgende Test-Datei wurde f√ºr die Bewertung verwendet:

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.Arrays;

import org.junit.jupiter.api.Test;

public class GradingNeighborTest {
	
	@Test
	public void test01ArgumentArrayNotModifed() {
		int[] sequence = new int[] {1, 4, 5, 7, 9, 10};
		int key = 5;
		
		int[] copy = Arrays.copyOfRange(sequence, 0, sequence.length);
		
		Neighbor.neighbor(sequence, key);
		 
		assertArrayEquals(copy, sequence);
	}

	@Test
	public void test02NeighborExamples() {		
		assertArrayEquals(new int[] {5, 4, 7}, Neighbor.neighbor(new int[] {1, 4, 5, 7, 9, 10}, 5));
		int[] test2 = Neighbor.neighbor(new int[] {1, 4, 5, 6, 9, 10}, 5);
		assertTrue(test2 != null && test2.length == 3 && test2[0] == 5 && ((test2[1] == 4 && test2[2] == 6) || (test2[1] == 6 && test2[2] == 4)));
		
		assertArrayEquals(new int[] {10, 9, 6}, Neighbor.neighbor(new int[] {1, 4, 5, 6, 9, 10}, 10));
	}

	@Test
	public void test03LongerInputSimple() {
		int[] sequence = new int[] {1, 10, 19, 1000, 2000, 3000, 4000, 5000};
		int key = 10;
		
		assertTrue(
				equalToOneArray(new int [][] { new int [] {10, 1, 19}, new int [] {10, 19, 1}}, 
				        Neighbor.neighbor(sequence, key))
				);
	}
	
	@Test
	public void test04LongerInputContainedUp1() {
		int[] sequence = new int[] {1, 2, 3, 4, 5, 6, 7, 8, 21, 22, 23, 30, 31, 33, 35, 38};
		int key = 21;
		
		assertArrayEquals(new int[] {21, 22, 23}, Neighbor.neighbor(sequence, key));
	}
	
	@Test
	public void test05LongerInputContainedDown2() {
		int[] sequence = new int[] {1, 2, 3, 4, 5, 6, 7, 8, 21, 22, 23, 50, 51, 53, 55, 58};
		int key = 23;
		
		assertArrayEquals(new int[] {23, 22, 21}, Neighbor.neighbor(sequence, key));
	}	
	
	@Test
	public void test06NegativeLongerInputContainedDown1() {
		int[] sequence = new int[] {-58, -55, -48, -42, -38, -23, -22, -21, -5, -4, -3, -2};
		int key = -21;
		
		assertArrayEquals(new int[] {-21, -22, -23}, Neighbor.neighbor(sequence, key));
	}
	
	@Test
	public void test07NegativeLongerInputContainedDown2() {
		int[] sequence = new int[] {-58, -55, -48, -42, -38, -1, 0, 1, 36, 40, 46, 53};
		int key = 1;
		
		assertArrayEquals(new int[] {1, 0, -1}, Neighbor.neighbor(sequence, key));
	}
		
	@Test
	public void test08SmallestInputContainedUp1() {
		int[] sequence = new int[] {1, 2, 3};
		int key = 1;
		
		assertArrayEquals(new int[] {1, 2, 3}, Neighbor.neighbor(sequence, key));
	}
	
	@Test
	public void test09SmallestInputContainedDown2() {
		int[] sequence = new int[] {1, 2, 3};
		int key = 3;
		
		assertArrayEquals(new int[] {3, 2, 1}, Neighbor.neighbor(sequence, key));
	}
	
	@Test
	public void test10SmallestInputContainedMixed3() {
		int[] sequence = new int[] {1, 2, 3};
		int key = 2;
		
		assertTrue(equalToOneArray(new int[][] { new int[] {2,1,3}, new int[] {2,3,1}}, 
				   Neighbor.neighbor(sequence, key)));
	}
	
	@Test
	public void test11NegativeSmallestInputContainedDown1() {
		int[] sequence = new int[] {-3, -2, -1};
		int key = -1;
		
		assertArrayEquals(new int[] {-1, -2, -3}, Neighbor.neighbor(sequence, key));
	}
	
	@Test
	public void test12NegativeSmallestInputContainedDown2() {
		int[] sequence = new int[] {-1, 0, 1};
		int key = 1;
		
		assertArrayEquals(new int[] {1, 0, -1}, Neighbor.neighbor(sequence, key));
	}

	
	
	/** not contained **/
	@Test
	public void test13LongerInputNotContainedUp4() {
		int[] sequence = new int[] {1, 2, 3, 4, 5, 6, 7, 8, 21, 22, 23, 50, 51, 53, 55, 58};
		int key = 20;
		
		assertArrayEquals(new int[] {21, 22, 23}, Neighbor.neighbor(sequence, key));
	}
	
	@Test
	public void test14LongerInputNotContainedDown5() {
		int[] sequence = new int[] {1, 2, 3, 4, 5, 6, 7, 8, 21, 22, 23, 50, 51, 53, 55, 588};
		int key = 24;
		
		assertArrayEquals(new int[] {23, 22, 21}, Neighbor.neighbor(sequence, key));
	}
	
	@Test
	public void test15LongerInputNotContained8() {
		int[] sequence = new int[] {1, 2, 3, 4, 5, 6, 7, 8, 21, 24, 27, 50, 51, 53, 55, 58};
		int key = 22;
		
		assertArrayEquals(new int[] {21, 24, 27}, Neighbor.neighbor(sequence, key));
		
		int[] sequence2 = new int[] {1, 2, 3, 4, 5, 6, 7, 8, 21, 24, 27, 50, 51, 53, 55, 58};
		int key2 = 23;
		
		assertArrayEquals(new int[] {24, 21, 27}, Neighbor.neighbor(sequence2, key2));
	}
	
	@Test
	public void test16LongerInputNotContained10() {
		int[] sequence = new int[] {1, 2, 3, 4, 5, 6, 7, 8, 21, 24, 27, 50, 51, 53, 55, 58};
		int key = 26;
		
		assertArrayEquals(new int[] {27, 24, 21}, Neighbor.neighbor(sequence, key));
		
		int[] sequence2 = new int[] {1, 2, 3, 4, 5, 6, 7, 8, 21, 24, 27, 50, 51, 53, 55, 58};
		int key2 = 25;
		
		assertArrayEquals(new int[] {24, 27, 21}, Neighbor.neighbor(sequence2, key2));
	}
	
	@Test
	public void test17NegativeSmallestInputNotContained3() {
		int[] sequence = new int[] {-7, -4, -1};
		int key = -5;
		
		assertArrayEquals(new int[] {-4, -7, -1}, Neighbor.neighbor(sequence, key));
		
		int[] sequence2 = new int[] {-3, 0, 3};
		int key2 = -1;
		
		assertArrayEquals(new int[] {0, -3, 3}, Neighbor.neighbor(sequence2, key2));
	}

	@Test
	public void test18SmallestInputNotContainedUp4() {
		int[] sequence = new int[] {1, 2, 3};
		int key = 0;
		
		assertArrayEquals(new int[] {1, 2, 3}, Neighbor.neighbor(sequence, key));
	}
	
	@Test
	public void test19SmallestInputNotContainedDown5() {
		int[] sequence = new int[] {1, 2, 3};
		int key = 4;
		
		assertArrayEquals(new int[] {3, 2, 1}, Neighbor.neighbor(sequence, key));
	}
	
	@Test
	public void test20SmallestInputNotContained6() {
		int[] sequence = new int[] {1, 3, 5};
		int key = 2;
		
		assertTrue(equalToOneArray(new int[][] { new int[] {1,3,5}, new int[] {3,1,5} }, 
				   Neighbor.neighbor(sequence, key)));
		
		int[] sequence2 = new int[] {1, 4, 7};
		int key2 = 2;
		
		assertArrayEquals(new int[] {1, 4, 7}, Neighbor.neighbor(sequence2, key2));
	}
	
	@Test
	public void test21SmallestInputNotContainedMixed7() {
		int[] sequence = new int[] {1, 3, 5};
		int key = 4;
		
		assertTrue(equalToOneArray(new int[][] { new int[] {3,5,1}, new int[] {5,3,1}}, 
				   Neighbor.neighbor(sequence, key)));
	}
	
	@Test
	public void test22SmallestInputNotContainedMixed9() {		
		int[] sequence = new int[] {1, 4, 7};
		int key = 3;
		
		assertArrayEquals(new int[] {4, 1, 7}, Neighbor.neighbor(sequence, key));
	}
	
	@Test
	public void test23SmallestInputNotContained10() {
		int[] sequence = new int[] {1, 4, 7};
		int key = 6;
		
		assertArrayEquals(new int[] {7, 4, 1}, Neighbor.neighbor(sequence, key));
		
		int[] sequence2 = new int[] {1, 4, 7};
		int key2 = 5;
		
		assertArrayEquals(new int[] {4, 7, 1}, Neighbor.neighbor(sequence2, key2));
	}
	
	@Test
	public void test24NegativeLongerInputNotContained3() {
		int[] sequence = new int[] {-58, -55, -48, -42, -38, -27, -24, -21, -5, -4, -3, -2};
		int key = -25;
		
		assertArrayEquals(new int[] {-24, -27, -21}, Neighbor.neighbor(sequence, key));
		
		int[] sequence2 = new int[] {-58, -55, -48, -42, -38, -3, 0, 3, 36, 40, 46, 53};
		int key2 = -1;
		
		assertArrayEquals(new int[] {0, -3, 3}, Neighbor.neighbor(sequence2, key2));
	}
	
	public static boolean equalToOneArray(int[][] expected, int[] result) {
		for (int[] e : expected) {
			if (Arrays.equals(result, e)) return true;
		}
		return false;
	}

}