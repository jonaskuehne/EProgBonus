NETHZ: jkuehne

Total points: 5

compile errors: NO
timeout: NO

testA01: PASS
testA02: PASS
testA03: PASS
testA04: PASS
testA05: PASS
testA06: PASS
testA07: PASS
testA08: PASS
testA09: PASS
testA10: PASS
testA11: PASS
testA12: PASS
testA13: PASS
testA14: PASS
testA15: PASS
testA16: PASS
testA17: PASS


Folgende Test-Datei wurde f√ºr die Bewertung verwendet:

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import org.junit.jupiter.api.Test;

public class GradingGraphAllResults {
	
	@Test
	public void testA01() {
		Node m1 = graph1(true);

		LinkedProgramStateList results = GraphExecution.allResults(m1, new ProgramState(-4, 6));

		assertNotNull(results);
		assertResultsCorrect(LinkedProgramStateList.of(new ProgramState(17, 11)), results);
	}

	@Test
	public void testA02() {
		Node m1 = graph1(false);

		LinkedProgramStateList results = GraphExecution.allResults(m1, new ProgramState(1, 1));

		assertNotNull(results);
		assertResultsCorrect(LinkedProgramStateList.of(new ProgramState(17, 5), new ProgramState(32, 4)), results);
	}

	@Test
	public void testA03() {
		Node m4 = Node.newAddNode(34);
		Node m5 = Node.newAddNode(-1);
		Node m6 = Node.newAddNode(22);
		Node m7 = Node.newAddNode(4);

		Node m2 = Node.newChoiceNode(new Node[] {m4, m5});
		Node m3 = Node.newChoiceNode(new Node [] {m6, m7});

		Node m1 = Node.newChoiceNode(new Node[] {m2, m3});

		LinkedProgramStateList results = GraphExecution.allResults(m1, new ProgramState(1, 1));

		assertNotNull(results);
		assertResultsCorrect(LinkedProgramStateList.of(
				new ProgramState(35, 2), 
				new ProgramState(0, 2), 				
				new ProgramState(23, 2),
				new ProgramState(5,2)
				),
				results);
	}
	
	@Test
	public void testA04() {
		Node m1 = Node.newAddNode(-1);

		LinkedProgramStateList results = GraphExecution.allResults(m1, new ProgramState(0, 5));

		assertNotNull(results);
		assertResultsCorrect(LinkedProgramStateList.of(new ProgramState(-1, 6)), results);
	}

	@Test
	public void testA05() {
		Node m4 = Node.newAddNode(14);
		Node m5 = Node.newAddNode(-9);
		Node m6 = Node.newAddNode(25);
		Node m7 = Node.newAddNode(26);
		Node m8 = Node.newAddNode(27);
		Node m9 = Node.newAddNode(32);


		Node m1 = Node.newChoiceNode(new Node[] {m4, m5, m6, m7, m8, m9});

		LinkedProgramStateList results = GraphExecution.allResults(m1, new ProgramState(5, 8));

		assertNotNull(results);
		assertResultsCorrect(LinkedProgramStateList.of(
				new ProgramState(19, 9), 
				new ProgramState(-4, 9),
				new ProgramState(30, 9),
				new ProgramState(31, 9),
				new ProgramState(32, 9),
				new ProgramState(37, 9)), results);
	}

	@Test
	public void testA06() {
		Node m4 = Node.newAddNode(10);
		Node m5 = Node.newAddNode(-8);
		Node m6 = Node.newAddNode(11);
		Node m7 = Node.newAddNode(14);
		Node m8 = Node.newAddNode(15);

		Node m1 = Node.newSeqNode(new Node[] {m4, m5, m6, m7, m8});

		LinkedProgramStateList results = GraphExecution.allResults(m1, new ProgramState(0, 0));

		assertNotNull(results);
		assertResultsCorrect(LinkedProgramStateList.of(new ProgramState(42, 5)), results);
	}

	@Test
	public void testA07() {
		Node m1 = Node.newAddNode(3);
		Node m3 = Node.newAddNode(1);
		Node m4 = Node.newAddNode(1);
		Node m5 = Node.newAddNode(-5);
		
		Node n10 = Node.newAddNode(4);
		Node n11 = Node.newAddNode(5);
		Node n12 = Node.newAddNode(6);

		Node m2 = Node.newChoiceNode(new Node[] {n10, n11, n12});

		Node m6 = Node.newSeqNode(new Node[] {m1, m2});
		Node m7 = Node.newChoiceNode(new Node[] {m4, m5});
		Node m8 = Node.newSeqNode(new Node[] {m3, m7});
		Node m9 = Node.newChoiceNode(new Node[] {m6, m8});

		LinkedProgramStateList results = GraphExecution.allResults(m9, new ProgramState(4, 3));

		assertNotNull(results);
		assertResultsCorrect(LinkedProgramStateList.of(
				new ProgramState(11, 5),
				new ProgramState(12, 5),
				new ProgramState(13, 5),
				new ProgramState(6, 5), 
				new ProgramState(0, 5)), results);
	}

	@Test
	public void testA08() {
		Node m1 = Node.newAddNode(-2);
		Node m2 = Node.newAddNode(4);
		Node m3 = Node.newAddNode(1);
		Node m5 = Node.newAddNode(7);
		
		Node n10 = Node.newChoiceNode(new Node [] {Node.newAddNode(9), Node.newAddNode(10)});
		
		Node m4 = Node.newChoiceNode(new Node [] {Node.newAddNode(11), n10});

		Node m6 = Node.newChoiceNode(new Node[] {m1, m2});
		Node m7 = Node.newChoiceNode(new Node[] {m3, m6});
		Node m8 = Node.newChoiceNode(new Node[] {m4, m7});
		Node m9 = Node.newChoiceNode(new Node[] {m5, m8});

		LinkedProgramStateList results = GraphExecution.allResults(m9, new ProgramState(90, 3));

		assertNotNull(results);
		assertResultsCorrect(LinkedProgramStateList.of(
				new ProgramState(97, 4), 
				new ProgramState(99, 4),
				new ProgramState(100, 4),
				new ProgramState(101, 4),
				new ProgramState(91, 4),
				new ProgramState(88, 4), 
				new ProgramState(94, 4)), results);
	}
	
	@Test
	public void testA09() {
		Node m1 = Node.newAddNode(-2);
		Node m2 = Node.newAddNode(4);
		Node m3 = Node.newAddNode(1);
		Node m5 = Node.newAddNode(7);
		
		Node n10 = Node.newSeqNode(new Node [] {Node.newAddNode(9), Node.newAddNode(10)});
		
		Node m4 = Node.newSeqNode(new Node [] {Node.newAddNode(11), n10});

		Node m6 = Node.newSeqNode(new Node[] {m1, m2});
		Node m7 = Node.newSeqNode(new Node[] {m3, m6});
		Node m8 = Node.newSeqNode(new Node[] {m4, m7});
		Node m9 = Node.newSeqNode(new Node[] {m5, m8});

		LinkedProgramStateList results = GraphExecution.allResults(m9, new ProgramState(90, 3));

		assertNotNull(results);
		assertResultsCorrect(LinkedProgramStateList.of(
				new ProgramState(130, 10)), results);
	}

	@Test
	public void testA10() {
		Node m1 = Node.newAddNode(3);
		Node m2 = Node.newAddNode(4);
		Node m3 = Node.newAddNode(5);
		Node m4 = Node.newAddNode(-3);
		Node m5 = Node.newAddNode(-2);
		Node m6 = Node.newAddNode(-1);		
		Node m7 = Node.newAddNode(12);
		Node m8 = Node.newAddNode(13);
		Node m9 = Node.newAddNode(14);
		Node m10 = Node.newAddNode(-8);

		Node m11 = Node.newSeqNode(new Node[] {m1, m2, m3});
		Node m12 = Node.newSeqNode(new Node[] {m4, m5});
		Node m13 = Node.newSeqNode(new Node[] {m6, Node.newAddNode(9)});
		Node m14 = Node.newSeqNode(new Node[] {m7, m8});
		Node m15 = Node.newChoiceNode(new Node[] {m10, m12, m13, m14});
		Node m16 = Node.newChoiceNode(new Node[] {m15, Node.newAddNode(2)});
		Node m17 = Node.newChoiceNode(new Node[] {m16, m11});
		Node m18 = Node.newChoiceNode(new Node[] {m17, m9});

		LinkedProgramStateList results = GraphExecution.allResults(m18, new ProgramState(0, 1));

		assertNotNull(results);
		assertResultsCorrect(LinkedProgramStateList.of(
				new ProgramState(14, 2),
				new ProgramState(2, 2),
				new ProgramState(-8, 2),
				new ProgramState(-5, 3),
				new ProgramState(8, 3),
				new ProgramState(25, 3),
				new ProgramState(12, 4)				
				), results);
	}
	
	@Test
	public void testA11() {
		Node m1 = Node.newAddNode(3);
		Node m2 = Node.newAddNode(4);
		Node m3 = Node.newAddNode(5);
		Node m4 = Node.newAddNode(-3);
		Node m5 = Node.newAddNode(-2);
		Node m6 = Node.newAddNode(-1);		
		Node m7 = Node.newAddNode(12);
		Node m8 = Node.newAddNode(13);
		Node m9 = Node.newAddNode(14);
		Node m10 = Node.newAddNode(-8);

		Node m11 = Node.newChoiceNode(new Node[] {m1, m2, m3});
		Node m12 = Node.newChoiceNode(new Node[] {m4, m5});
		Node m13 = Node.newChoiceNode(new Node[] {m6, Node.newAddNode(9)});
		Node m14 = Node.newChoiceNode(new Node[] {m7, m8});
		Node m15 = Node.newChoiceNode(new Node[] {m10, m12, m13, m14});
		Node m16 = Node.newChoiceNode(new Node[] {m15, Node.newAddNode(2)});
		Node m17 = Node.newChoiceNode(new Node[] {m16, m11});
		Node m18 = Node.newChoiceNode(new Node[] {m17, m9});

		LinkedProgramStateList results = GraphExecution.allResults(m18, new ProgramState(0, 1));

		assertNotNull(results);
		assertResultsCorrect(LinkedProgramStateList.of(
				new ProgramState(3,2),
				new ProgramState(4,2),
				new ProgramState(5,2),
				new ProgramState(-3,2),
				new ProgramState(-2,2),
				new ProgramState(-1,2),
				new ProgramState(12,2),
				new ProgramState(13,2),
				new ProgramState(14,2),
				new ProgramState(-8,2),
				new ProgramState(9,2),
				new ProgramState(2,2)
				), results);
	}

	@Test
	public void testA12() {
		Node m1 = Node.newAddNode(3);
		Node m2 = Node.newAddNode(4);
		Node m3 = Node.newAddNode(5);
		Node m4 = Node.newAddNode(-3);
		Node m5 = Node.newAddNode(-2);
		Node m6 = Node.newAddNode(-1);		
		Node m7 = Node.newAddNode(12);
		Node m8 = Node.newAddNode(13);
		Node m9 = Node.newAddNode(14);
		Node m10 = Node.newAddNode(-8);

		Node m11 = Node.newSeqNode(new Node[] {m1, m2, m3});
		Node m12 = Node.newSeqNode(new Node[] {m4, m5});
		Node m13 = Node.newSeqNode(new Node[] {m6, Node.newAddNode(9)});
		Node m14 = Node.newSeqNode(new Node[] {m7, m8});
		Node m15 = Node.newSeqNode(new Node[] {m10, m12, m13, m14});
		Node m16 = Node.newSeqNode(new Node[] {m15, Node.newAddNode(2)});
		Node m17 = Node.newSeqNode(new Node[] {m16, m11});
		Node m18 = Node.newSeqNode(new Node[] {m17, m9});

		LinkedProgramStateList results = GraphExecution.allResults(m18, new ProgramState(0, 1));

		assertNotNull(results);
		assertResultsCorrect(LinkedProgramStateList.of(
				new ProgramState(48, 13)
				), results);	
	}

	@Test
	public void testA13() {
		Node m4 = Node.newAddNode(1002);
		Node m5 = Node.newAddNode(2003);

		Node m1 = new Node(9, "ADD", new Node[] {m4, m5});

		LinkedProgramStateList results = GraphExecution.allResults(m1, new ProgramState(2, 3));

		assertNotNull(results);
		assertResultsCorrect(LinkedProgramStateList.of(new ProgramState(11, 4)), results);
	}

	@Test
	public void testA14() {
		Node m1 = Node.newAddNode(10);
		Node m2 = Node.newChoiceNode(new Node[] {m1});

		LinkedProgramStateList results = GraphExecution.allResults(m2, new ProgramState(0, 0));

		assertNotNull(results);
		assertResultsCorrect(LinkedProgramStateList.of(new ProgramState(10, 1)), results);
	}

	@Test
	public void testA15() {
		Node m1 = Node.newAddNode(11);
		Node m2 = Node.newSeqNode(new Node[] {m1});

		LinkedProgramStateList results = GraphExecution.allResults(m2, new ProgramState(0, 0));

		assertNotNull(results);
		assertResultsCorrect(LinkedProgramStateList.of(new ProgramState(11, 1)), results);
	}

	@Test
	public void testA16() {
		Node m1 = Node.newAddNode(-5);
		Node m2 = Node.newAddNode(1);
		Node m3 = Node.newAddNode(0);
		Node m4 = Node.newAddNode(-2);
		Node m5 = Node.newAddNode(1);
		Node m6 = Node.newAddNode(0);
		Node m7 = Node.newAddNode(1);
		Node m8 = Node.newAddNode(2);
		Node m9 = Node.newChoiceNode(new Node [] {m1, m2, m3, m4, m5, m6, m7, m8});

		LinkedProgramStateList results = GraphExecution.allResults(m9, new ProgramState(0, 0));

		assertNotNull(results);
		assertResultsCorrect(LinkedProgramStateList.of(
				new ProgramState(-5, 1), 
				new ProgramState(1, 1), 
				new ProgramState(0, 1),
				new ProgramState(-2, 1), 
				new ProgramState(1, 1), 
				new ProgramState(0, 1), 
				new ProgramState(1, 1),
				new ProgramState(2, 1)), results);
	}
	
	@Test
	public void testA17() {
		/* Level 2 */
		Node n20_c = Node.newChoiceNode(new Node[] { Node.newAddNode(1), Node.newAddNode(3) });
		Node n21_s = Node.newSeqNode(new Node[] { Node.newAddNode(3), Node.newAddNode(4) });
		
		Node n22_c = Node.newChoiceNode(new Node[] { Node.newAddNode(5), Node.newAddNode(6) });
		Node n23_s = Node.newSeqNode(new Node[] { Node.newAddNode(7), Node.newAddNode(8) });
		
		/* Level 1 */
		Node n10_c = Node.newChoiceNode(new Node[] { n20_c, n21_s });
		Node n11_s = Node.newSeqNode(new Node[] { n22_c, n23_s });
		
		/* Level 0 */
		Node n00_s = Node.newSeqNode(new Node [] { n10_c, n11_s });
		
		
		LinkedProgramStateList results = GraphExecution.allResults(n00_s, new ProgramState(0, 0));
		
		assertNotNull(results);
		assertResultsCorrect(LinkedProgramStateList.of(
				new ProgramState(21, 4),
				new ProgramState(22, 4),
				new ProgramState(23, 4),
				new ProgramState(24, 4),
				new ProgramState(27, 5),
				new ProgramState(28, 5)), results);
	}



	/** example graphs **/
	public Node graph1(boolean determ) {
		Node m2 = Node.newAddNode(14);
		
		Node m7 = Node.newAddNode(-2);
		Node m8 = Node.newAddNode(-8);
		Node m5 = Node.newSeqNode(new Node[] {m7,m8});
		
		Node m6 = Node.newAddNode(5);
		Node m3 = determ ? Node.newSeqNode(new Node[] {m5,m6}) : Node.newChoiceNode(new Node[] {m5,m6});
		
		Node m4 = Node.newAddNode(12);
		
		Node m1 = Node.newSeqNode(new Node[] {m2,m3,m4});

		return m1;
	}

	/** helper methods **/

	public static void assertResultsCorrect(LinkedProgramStateList expected, LinkedProgramStateList actual) {
		assertEquals(expected.size, actual.size);
		
		
		LinkedProgramStateList expectedCopy = new LinkedProgramStateList();
		for (int i = 0; i < expected.size; i += 1) {
			expectedCopy.addLast(expected.get(i));
		}
		
		for(int i = 0; i < actual.size; i += 1) {
			ProgramState result = actual.get(i);
			boolean couldRemove = removeFromList(expectedCopy, result);
			if(!couldRemove) {
				throw new AssertionError(String.format("Zustand (%d,%d) sollte nicht vorkommen oder kommt zu oft vor.", result.getSum(), result.getCounter()));
			}
		}	
	}
	
	public static boolean removeFromList(LinkedProgramStateList list, ProgramState elem) {
		for (int i = 0; i < list.size; i += 1) {
			ProgramState cur = list.get(i);
			if (equalsProgramResult(cur, elem)) {
				list.remove(i);
				return true;
			}
		}
		return false;
	}

	public static boolean equalsProgramResult(ProgramState r1, ProgramState r2) {
		return r1.getSum() == r2.getSum() && r1.getCounter() == r2.getCounter();
	}

}