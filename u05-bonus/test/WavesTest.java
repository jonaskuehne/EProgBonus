/*
Author: J. Kuehne
Date: 26.10.2022
Lecture: EProg
Project: Bonus week 5
Summary:
    This file contains the tests for the bonus exercise of week 5.
*/

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;

public class WavesTest {
	@Test
	public void testWaveNormal() {
		
		assertEquals(3, Waves.waves(new int[][] {
			{1, 0, 1, 0, 1, 0},
			{1, 0, 1, 0, 1, 0},
			{1, 0, 1, 0, 1, 1},
			{0, 0, 1, 1, 0, 0},
			{1, 1, 0, 1, 1, 0},
			{0, 1, 0, 0, 1, 0},
		}));
		
		assertEquals(1, Waves.waves(new int[][] {
			{0, 0, 1, 1, 0},
			{0, 0, 0, 1, 1},
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0},
		}));
		
		assertEquals(1, Waves.waves(new int[][] {
			{0, 0, 0, 1, 0},
			{0, 0, 0, 1, 1},
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0},
		}));
		
		assertEquals(2, Waves.waves(new int[][] {
			{1, 1, 1, 1, 0},
			{0, 0, 0, 1, 1},
			{1, 1, 1, 0, 1},
			{0, 0, 1, 0, 1},
			{0, 0, 1, 0, 1},
		}));
		
		assertEquals(1, Waves.waves(new int[][] {
			{0, 0, 1, 5, 4},
			{0, 0, 2, 5, 5},
			{0, 0, 3, 3, 0},
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0},
		}));
		
		assertEquals(0, Waves.waves(new int[][] {
			{0, 1, 0, 0, 0},
			{1, 1, 0, 0, 0},
			{0, 0, 0, 0, 0},
			{0, 0, 0, 1, 1},
			{0, 0, 0, 1, 0},
		}));
		
		assertEquals(2, Waves.waves(new int[][] {
			{1, 0, 4, 5, 0},
			{1, 0, 4, 5, 5},
			{1, 0, 4, 0, 0},
			{1, 0, 4, 0, 0},
			{1, 0, 4, 0, 0},
		}));
		
		assertEquals(1, Waves.waves(new int[][] {
			{1, 0, 4, 5, 0},
			{1, 0, 4, 5, 5},
			{1, 0, 4, 0, 0},
			{1, 0, 4, 0, 0},
			{1, 1, 4, 0, 0},
		}));
		
	}
	
	
	@Test
	public void testWaveFun() {
		
		assertEquals(1, Waves.waves(new int[][] {
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0},
			{0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0},
			{0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0},
			{0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
			{0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0},
			{0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1},
			{0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0},
			{0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0},
			{0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0},
			{0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		}));
		
		assertEquals(1, Waves.waves(new int[][] {
			{1, 0, 1, 1, 1, 0},
			{1, 0, 1, 0, 1, 0},
			{1, 0, 1, 0, 1, 0},
			{1, 0, 1, 0, 1, 0},
			{1, 1, 1, 0, 1, 0},
			{0, 0, 0, 0, 1, 0},
		}));
		
		assertEquals(1, Waves.waves(new int[][] {
			{1, 0, 1, 1, 1, 0},
			{1, 0, 1, 0, 1, 0},
			{1, 0, 1, 0, 1, 0},
			{1, 0, 1, 0, 1, 0},
			{1, 0, 1, 0, 1, 0},
			{1, 1, 1, 0, 1, 1},
		}));
	}
	
	
	@Test
	public void testWaveEdge() {
		assertEquals(1, Waves.waves(new int[][] {
			{1, 0, 0, 0, 0, 0},
			{1, 0, 0, 0, 0, 0},
			{1, 0, 0, 0, 0, 0},
			{1, 0, 0, 0, 0, 0},
			{1, 0, 0, 0, 0, 0},
			{1, 0, 0, 0, 0, 0},
		}));
		
		assertEquals(1, Waves.waves(new int[][] {
			{1, 1, 1, 1, 1, 1},
			{0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0},
		}));
		
		assertEquals(1, Waves.waves(new int[][] {
			{1, 1, 1, 1, 1, 1},
			{1, 0, 0, 0, 0, 0},
			{1, 0, 0, 0, 0, 0},
			{1, 0, 0, 1, 1, 1},
			{1, 0, 0, 1, 0, 0},
			{1, 0, 0, 1, 0, 1},
		}));
		
		assertEquals(0, Waves.waves(new int[][] {
			{1, 1, 1, 1, 1, 1},
			{1, 0, 0, 1, 0, 0},
			{1, 0, 0, 0, 0, 0},
			{1, 0, 0, 0, 0, 0},
			{1, 0, 0, 0, 0, 0},
			{1, 0, 0, 0, 0, 0},
		}));
		
		assertEquals(2, Waves.waves(new int[][] {
			{0, 0, 0, 0, 0, 1},
			{0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0},
			{1, 0, 0, 0, 0, 0},
		}));
		
	}
}
